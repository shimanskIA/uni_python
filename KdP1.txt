1b:
Eine siwtch-case Anweisung kann man mit if-elif Anweisungen simulieren, indem man die erste if-Anweisung statt switch-Anweisung nutzt und 
die weiteren elif-Anweisungen statt case, das könnte so aussehen:
input(letter)
if (letter == 'a'): $Anweisung 1$
elif (letter == 'b'): $Anweisung 2$
elif (letter == 'c'): $Anweisung 3$
...
elif (letter == 'y'): $Anweisung 27$
else: $Anweisung 28$

1c:
Bei einer while-Schleife muss der Zähler jedes Mal innerhalb der Schleife geändert werden, also die Schleife:
for i in range(a, b, c) könnte man durch die Schleife ersetzen:
	i = a
	while i < b:
	...
	i += c

2b:
if $Bedingung$ then $Anweisung1$
if $nicht Bedingung$ then $Anweisung2$ 

Mit einem konkreten Beispiel:
a = input()
if a % 2 == 0 then print("gerade")
if a % 2 != 0 then print("ungerade")

Das heißt man muss die zweite Bedingung (oder die Gegenbedingung) auch ausdrücklich schreiben. Der Nachteil ist aber, dass
dabei Vergleiche gemacht werden, die tatsächlich nicht nötig sind. 
 
2c:
Bei einer do-while Schleife wird eine Answeisung ausgeführt solange die nachfolgende Bedingung richtig ist.
Da die Bedingung nachfolgend ist, wird die Anweisung mindestens einmal ausgeführt und erst dann wird überprüft, ob
die Bedingung richtig ist.
Beispiel in Python:
$Anweisung$				
while $Bedingung$:			
	$Anweisung$ 

input(a)
a *= 2
while a <= 100: a *=2